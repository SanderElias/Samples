import{c as v,d as T,e as R,f as S,g as $,h as C}from"./chunk-GW4DIXBX.js";import{d as p}from"./chunk-XD26RAP7.js";import{b as k}from"./chunk-O3LUJ5SK.js";import{_ as y,da as f,na as j,sa as h,vc as w,wc as D,xc as I}from"./chunk-OGHAFDIF.js";import{a as c,b as u}from"./chunk-I4MTPUBM.js";var A=(()=>{class s{constructor(){this.shown=h(!1),this.message=h(""),this.template=h(void 0),this.title=h("Sorry, something went wrong"),this.type=h("error"),this.dismissButtonText=h("dismiss"),this.showTemplate=e=>{this.template.set(e),this.shown.set(!0)},this.show=(e,r,t="error")=>{this.message.set(e),r&&this.title.set(r),this.type.set(t),this.shown.set(!0)},this.close=()=>{this.shown.set(!1),this.template.set(void 0),this.message.set(""),this.type.set("error"),this.title.set("Sorry, something went wrong"),this.dismissButtonText.set("dismiss")},this.isShown=()=>this.shown()}static{this.\u0275fac=function(r){return new(r||s)}}static{this.\u0275prov=y({token:s,factory:s.\u0275fac,providedIn:"root"})}}return s})();function m(s,n=""){return Object.entries(s).reduce((e,[r,t])=>$(t)?c(c({},e),m(t,`${n}${r}.`)):Array.isArray(t)?c(c({},e),E(t,`${n}${r}.`)):u(c({},e),{[`${n}${r}`]:t}),{})}function E(s,n=""){return s.reduce((e,r,t)=>$(r)?c(c({},e),m(r,`${n}${t}.`)):Array.isArray(r)?c(c({},e),E(r,`${n}${t}.`)):u(c({},e),{[`${n}${t}`]:r}),{})}function U(s){return Object.entries(s).reduce((n,[e,r])=>{let t=e.split("."),o=t.pop(),i=n;for(let a=0;a<t.length;a++){let l=t[a],x=t[a+1]??o;i=i[l]??=S(x)?[]:{}}return i[o]=r,n},{})}var F=(s,n=new Map,e={})=>{let r=f(j),t=p(()=>{},{injector:r}),o=i=>{if(i===""||i===void 0||i==="-1")return t;let a=`${s}/${i}`;return n.has(a)||w(()=>{let l=p(()=>c({url:`${s}/${i}`},e),{injector:r});n.set(a,l)}),n.get(a)};return i=>D(()=>o(i()))};var O=(s,n)=>{let e=m(s),r=m(n),t={};for(let o in e)e[o]!==r[o]&&(t[o]=r[o]??e[o]);for(let o in r)o in e||(t[o]=r[o]);return U(t)};var _=`Basic ${btoa("admin:password")}`,d={Authorization:_,"Content-Type":"application/json"},g={headers:d},lt=(()=>{class s{#e;#r;#t;#o;#s;#i;constructor(){this.baseUrl="http://127.0.0.1:5984/relations",this.#e=f(T),this.#r=f(A),this.#t=new Map,this.filter=h(""),this.#o=v(()=>`(?i)${this.filter()}`,{delay:250}),this.sort=h("name"),this.order=h("asc"),this.refresh=h(0),this.#s=p(()=>({url:`${this.baseUrl}/_find?v=${this.refresh()}`,method:"POST",body:{selector:{$or:[{name:{$regex:this.#o()}},{username:{$regex:this.#o()}},{email:{$regex:this.#o()}}]},fields:["id"],sort:[{[this.sort()]:this.order()}],limit:15},headers:d}),{defaultValue:[],parse:e=>(e?.docs??[]).map(r=>r.id)}),this.#i=this.#s.value,this.list=this.#i.asReadonly(),this.listIsLoading=this.#s.isLoading,this._DbError=I(async()=>{let e=this.#s.error();if(!e)return;let r=e.error?.reason;if(!r){console.error("Unknown error",e),this.#r.show("This is a demo app, and it expects CouchDB to be running locally. Please check the console for more information.","CouchDB not found?");return}if(r.startsWith("No index exists")){console.error("Index not found, creating it");try{await q().catch(t=>console.error("Error creating index",t)),this.#s.reload()}catch(t){console.error("Error creating index",t)}}if(r.startsWith("Database does not exist")){console.error("Database not found, creating it");try{await w(async()=>await this.#e.put(this.baseUrl,{},g)),await M(),this.#s.reload()}catch(t){console.error("Error creating database",t)}}console.error(e),this.#r.show("There is an unknown error with the database. Please check the console for more information.","CouchDB error?")}),this.create=async e=>{let r=`${this.baseUrl}/${e.id}`;try{return await this.#e.put(r,e,g),this.#i.update(t=>[e.id,...t].splice(0,50)),!0}catch(t){return console.error("Error creating user",t),!1}},this.read=F(this.baseUrl,this.#t,{headers:d}),this.update=async e=>{let r=e.id,t=`${this.baseUrl}/${r}`;if(this.#t.has(t)&&R(this.#t.get(t)?.value(),e))return!0;try{let{rev:o}=await this.#e.put(t,e,g);if(this.#t.has(t)){let i=this.#t.get(t)?.value();i[this.sort()]!==e[this.sort()]&&(console.log(`sort field changed from ${i[this.sort()]} to ${e[this.sort()]}`),this.refresh.update(a=>a+1)),this.#t.get(t)?.update(a=>u(c({},e),{_rev:o}))}else console.log("no cache for",t,this.#t);return!0}catch(o){let{error:{error:i,reason:a}}=o??{};if(console.log(o,i,a),a.startsWith("Document update conflict"))try{let l=O(this.#t.get(t)?.value(),e),B=await(await fetch(t,{headers:d})).json();this.#t.get(t)?.set(C(B,l)),this.#r.show("we have merged in the upstream change, please verify your edit, and submit your changes again","Sorry, we detected a remote data change")}catch{this.#r.show("please reload your app","Sorry, but an unrecoverable error happend")}return!1}},this.delete=async e=>{let r=e.id,t=e._rev,o=`${this.baseUrl}/${r}`;try{await this.#e.delete(o+`?rev=${t}`,g)}catch(i){let{error:{error:a,reason:l}}=i??{};if(console.log(i,a,l),a==="not_found"&&l==="deleted")console.log("already deleted, ignore this log");else return this.#r.show("There was an update on the data you tried to delete. I have loaded the update into the view. review, and try to delete again if still needed.","The data was updated"),this.#t.get(o)?.reload(),!1}return this.#i.update(i=>i.filter(a=>a!==r)),!0}}async testLoadAll(){if(!(typeof window>"u"))try{let e=`${this.baseUrl}/_all_docs`,r={sort:[{[this.sort()]:this.order()}],include_docs:!1},t=performance.now(),o=await this.#e.post(e,r,g),i=performance.now();console.log("load all",i-t)}catch(e){console.error("Error getting all docs"),console.log(e)}}static{this.\u0275fac=function(r){return new(r||s)}}static{this.\u0275prov=y({token:s,factory:s.\u0275fac})}}return s})();async function M(){let n=await import("./dist-2FXOYP5S.js"),e="http://127.0.0.1:5984/relations/";for(let r=0;r<=25e4;r+=1){let t=await k(n.faker),o=await fetch(`${e}/${t.id}`,{method:"PUT",headers:d,body:JSON.stringify(t)})}}async function q(){await b("name"),await b("username"),await b("email"),console.log("Indexes created")}async function b(s){let n="http://127.0.0.1:5984/relations/_index",e={index:{fields:[s]},name:s,type:"json",ddoc:"fieldIndex-"+s},r=await fetch(n,{method:"POST",headers:d,body:JSON.stringify(e)});if(!r.ok)throw new Error(`Error creating index: ${r.statusText}`);let t=await r.json();return console.log("Index created",t),t}export{A as a,m as b,U as c,lt as d};
