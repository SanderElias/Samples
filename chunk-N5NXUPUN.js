import{Ba as b,ea as g,n as p,sa as w,sc as E,xc as v,yc as C,zc as S}from"./chunk-ZN5DRON2.js";import{a as y,b as D}from"./chunk-I4MTPUBM.js";var T=c=>c&&typeof c[Symbol.asyncIterator]=="function",x=c=>typeof c?.then=="function",k=(c,m,o)=>{let n=b({value:m,error:void 0});try{o=o??g(w)}catch{if(!o)throw new Error("[asyncComputed] destroyRef is mandatory when used outside a injection context");if(!(o instanceof w))throw new Error("[asyncComputed] parameter destroyRef is not a DestroyRef")}let r,l,h=()=>(l?.unsubscribe(),r?.abort()),s=i=>{if(i.aborted)throw new Error("aborted")};o.onDestroy(()=>{h(),a.destroy()});let a=C(async i=>{i(h);try{r=new AbortController;let u=r.signal,e=c(u);if(s(u),p(e))l=e.subscribe({next:t=>{s(u),n.set({value:t})},error:t=>{s(u),n.set({error:t})}});else if(x(e)){let t=await e;s(u),n.set({value:t})}else if(T(e))for await(let t of e)s(u),n.set({value:t});else n.set({value:e})}catch(u){u.message!=="aborted"&&n.set({error:u})}},{manualCleanup:!0,forceRoot:!0});return v(()=>{let i=n();if(i.error)throw E()&&console.warn(`
  [asyncComputed] error: ${i.error.message}
    The error was thrown inside the callback function. The best way to handle
    this error is  inside that function. However, asyncComputed will rethrow
    the error to make sure that the error is not silently ignored.
    The error will be reset when one of the signals inside the function changes.
    Until that happens, the error will be re-thrown by Angular on every use
    of the signal. (usually every change detection cycle)
    (this warning is only shown in dev mode)
`),i.error;return i.value})},P=(c,m,o)=>{let n=b({value:m,error:void 0,status:"init",stream:"init"}),r=e=>n.update(t=>y(y({},t),e));try{o=o??g(w)}catch{if(!o)throw new Error("[asyncComputed] destroyRef is mandatory when used outside a injection context");if(!(o instanceof w))throw new Error("[asyncComputed] parameter destroyRef is not a DestroyRef")}let l,h,s=()=>(h?.unsubscribe(),l?.abort()),a=e=>{if(e.aborted)throw new Error("aborted")};o.onDestroy(()=>{s(),i.destroy()});let i=C(async e=>{e(s),r({status:"triggered"});try{l=new AbortController;let t=l.signal,d=c(t);if(a(t),r({status:"loading",stream:"init"}),p(d))r({stream:"ongoing"}),h=d.subscribe({next:f=>{a(t),n.update(A=>D(y({},A),{value:f,error:void 0,status:"awaiting"}))},error:f=>{a(t),r({error:f,value:void 0,status:"error",stream:"done"})},complete:()=>{a(t),r({stream:"done"})}});else if(x(d)){let f=await d;a(t),r({value:f,error:void 0,status:"loaded",stream:"done"})}else if(T(d)){r({stream:"ongoing"});for await(let f of d)a(t),r({value:f,error:void 0,status:"awaiting"});r({stream:"done"})}else r({value:d,error:void 0,status:"loaded",stream:"done"})}catch(t){t.message!=="aborted"&&r({error:t})}},{manualCleanup:!0,forceRoot:!0}),u=S({source:()=>n().value,computation:e=>e});return v(()=>{let e=n();return{value:u,error:e.error,status:e.status,stream:e.stream}})},U=(c,m)=>{let o,n,r=m.delay||500,l=b(0);return S({source:()=>({value:c(),time:l()}),computation:({value:s,time:a})=>(a===0&&(n=s),o||(o=Date.now()+r,setTimeout(()=>l.set(a+1),r+1)),o<Date.now()&&(n=s,o=void 0),n),equal:m.equal}).asReadonly()};export{k as a,P as b,U as c};
